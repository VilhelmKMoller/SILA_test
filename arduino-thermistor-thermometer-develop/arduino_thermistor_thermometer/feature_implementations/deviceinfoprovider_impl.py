# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations
import os
import pathlib

from typing import TYPE_CHECKING, Any, List

from sila2.framework.data_types.date import SilaDateType
from sila2.server import MetadataDict

from ..device_metadata_model import DeviceMetaData
from ..jsonld_converter import read_jsonld

from ..generated.deviceinfoprovider import DeviceInfo, DeviceInfoProviderBase, SetOutputFormat_Responses

if TYPE_CHECKING:
    from ..server import Server


class DeviceInfoProviderImpl(DeviceInfoProviderBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

        self.device_metadata_output_format = "jsonld"

        # read local jsonld file and convert to dict
        try: 
            self.device_metadata = DeviceMetaData( ** read_jsonld(parent_server.device_info_path) )
        except Exception as err:
            parent_server.logger.error(f"Error reading device metadata: {err}")

    def get_DeviceName(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_name

    def get_DeviceClass(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_class.name

    def get_DeviceManufacturers(self, *, metadata: MetadataDict) -> List[str]:
        return [ manufacturer.name for manufacturer in self.device_metadata.manufacturers ]
    def get_DeviceModelName(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.model_name

    def get_DeviceVersion(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_version

    def get_DeviceFirmwareVersion(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.firmware_version
    
    def get_DeviceSerialNumber(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_serial_number

    def get_RegistrationNumber(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.registration_number

    def get_RegistrationBarcode(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.registration_barcode

    def get_PID(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_pid

    def get_PACID(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.pac_id

    def get_FirmwareVersion(self, *, metadata: MetadataDict) -> str:
        raise NotImplementedError  # TODO

    def get_DeviceManualUrl(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_manual_url
    
    def get_DeviceQuickStartGuideURL(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_quick_start_guide_url
    
    def get_DeviceServiceManualURL(self, *, metadata: MetadataDict) -> str:
        return self.device_metadata.device_service_manual_url

    def get_DevicePurchaseDate(self, *, metadata: MetadataDict) -> SilaDateType:
        return self.device_metadata.purchase_date

    def get_EndOfWarrentyDate(self, *, metadata: MetadataDict) -> SilaDateType:
        return self.device_metadata.end_of_warranty_date

    def get_DeviceInfo(self, *, metadata: MetadataDict) -> DeviceInfo:
        raise NotImplementedError  # TODO

    def get_ServiceDates(self, *, metadata: MetadataDict) -> Any:
        raise NotImplementedError  # TODO

    def SetOutputFormat(self, OutputFormat: str, *, metadata: MetadataDict) -> SetOutputFormat_Responses:
        
        if OutputFormat == "jsonld":
            self.device_metadata_output_format = "jsonld"
            return SetOutputFormat_Responses.Accepted
        elif OutputFormat == "json":
            self.device_metadata_output_format = "json"
            return SetOutputFormat_Responses.Accepted
        elif OutputFormat == "yaml":
            self.device_metadata_output_format = "yaml"
            return SetOutputFormat_Responses.Accepted
        else:
            return SetOutputFormat_Responses.InvalidOutputFormat
