# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from datetime import timedelta
from typing import TYPE_CHECKING, List

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.loggingservice import (
    GetLogFile_Responses,
    ListenToAllLogEntries_IntermediateResponses,
    ListenToAllLogEntries_Responses,
    ListenToLoggingStream_IntermediateResponses,
    ListenToLoggingStream_Responses,
    LoggingServiceBase,
    SetLogLevel_Responses,
)

if TYPE_CHECKING:
    from ..server import Server


class LoggingServiceImpl(LoggingServiceBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

        # Default lifetime of observable command instances. Possible values:
        # None: Command instance is valid and stored in memory until server shutdown
        # datetime.timedelta: Command instance is deleted after this duration, can be increased during command runtime
        self.ListenToLoggingStream_default_lifetime_of_execution = timedelta(minutes=30)
        self.ListenToAllLogEntries_default_lifetime_of_execution = timedelta(minutes=30)

    def get_LoggingStreamList(self, *, metadata: MetadataDict) -> List[str]:
        raise NotImplementedError  # TODO

    def get_LogFileList(self, *, metadata: MetadataDict) -> List[str]:
        raise NotImplementedError  # TODO

    def get_LogLevel(self, *, metadata: MetadataDict) -> str:
        raise NotImplementedError  # TODO

    def GetLogFile(self, LogFileName: str, *, metadata: MetadataDict) -> GetLogFile_Responses:
        raise NotImplementedError  # TODO

    def SetLogLevel(self, LogLevel: str, *, metadata: MetadataDict) -> SetLogLevel_Responses:
        raise NotImplementedError  # TODO

    def ListenToLoggingStream(
        self,
        LoggingStreamName: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ListenToLoggingStream_IntermediateResponses],
    ) -> ListenToLoggingStream_Responses:
        # set execution status from `waiting` to `running`
        instance.begin_execution()

        raise NotImplementedError  # TODO

    def ListenToAllLogEntries(
        self,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ListenToAllLogEntries_IntermediateResponses],
    ) -> ListenToAllLogEntries_Responses:
        # set execution status from `waiting` to `running`
        instance.begin_execution()

        raise NotImplementedError  # TODO
