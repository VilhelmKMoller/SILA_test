# Generated by sila2.code_generator; sila2.__version__: 0.12.2
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Iterable, Optional

    from sila2.client import ClientMetadataInstance, ClientUnobservableProperty
    from storageinfoprovider_types import SetOutputFormat_Responses


class StorageInfoProviderClient:
    """

    This SiLA feature provides detailed information about the storage aspects of a device, storage layout, etc.

    """

    SemanticStorageInfo: ClientUnobservableProperty[str]
    """
    
            Detailed Information about the Device Connection in a RDF serialisation format like JSON-LD.
        
    """

    def SetOutputFormat(
        self, OutputFormat: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetOutputFormat_Responses:
        """

        Set the output format of the device information, like TEXT, JSON-LD, XML, etc.
        The recommended default output format is JSON-LD, which allows to provide detailed information about the device in a structured way with semantic annotations / context, referencing to defined vocabularies.

        """
        ...
