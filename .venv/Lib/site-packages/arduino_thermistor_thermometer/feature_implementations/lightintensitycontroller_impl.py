# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from datetime import datetime, timedelta
from typing import TYPE_CHECKING
import logging

from sila2.server import MetadataDict, ObservableCommandInstance

from ..generated.lightintensitycontroller import ControlLightIntensity_Responses, LightIntensityControllerBase
from .temperature_metadata_model import jsonld_context

if TYPE_CHECKING:
    from ..server import Server

logger = logging.getLogger(__name__)

class LightIntensityControllerImpl(LightIntensityControllerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

        self.hwif = parent_server.hardware_interface

        # Default lifetime of observable command instances. Possible values:
        # None: Command instance is valid and stored in memory until server shutdown
        # datetime.timedelta: Command instance is deleted after this duration, can be increased during command runtime
        self.ControlLightIntensity_default_lifetime_of_execution = timedelta(minutes=30)

        self.run_periodically(self._keep_lightintensity_up_to_date, delay_seconds=5)

    def _keep_lightintensity_up_to_date(self):
        try:
            # random temperature for testing (float between 0 and 100)
            
            curr_li, target_li = (self.hwif.current_lightintensity, 66.9) #self.com.temperature
            self.current_lightintensity = curr_li
            print(f"**** updating light intensity - curr: {curr_li}  target intensity: {target_li}\n")
            self.update_CurrentLightIntensity(curr_li)

            # JSON-LD
            curr_li_jsonld = {
                "@context": "oso:lightintensity-control",
                "@type": "LightIntensity",
                "timestamp": datetime.now().isoformat(),
                "lightintensity": curr_li,
                "lightintensity_target": target_li,
            }
            self.update_CurrentLightIntensityJSONLD(str(curr_li_jsonld))
            
        except Exception as ex:
            logging.warning(
                f"Temperature update for thermometer failed: {ex} {traceback.print_exc()}"
            )
            pass

    def get_Metadata(self, *, metadata: MetadataDict) -> str:
        raise NotImplementedError  # TODO

    def ControlLightIntensity(
        self, TargetLightIntensity: float, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> ControlLightIntensity_Responses:
        # set execution status from `waiting` to `running`
        instance.begin_execution()

        raise NotImplementedError  # TODO
