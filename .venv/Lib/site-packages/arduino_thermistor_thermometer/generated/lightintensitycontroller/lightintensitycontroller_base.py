# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import timedelta
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstance

from .lightintensitycontroller_types import ControlLightIntensity_Responses

if TYPE_CHECKING:

    from ...server import Server


class LightIntensityControllerBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _CurrentLightIntensity_producer_queue: Queue[Union[float, Exception]]
    _CurrentLightIntensity_current_value: float

    _TargetLightIntensity_producer_queue: Queue[Union[float, Exception]]
    _TargetLightIntensity_current_value: float

    _CurrentLightIntensityJSONLD_producer_queue: Queue[Union[str, Exception]]
    _CurrentLightIntensityJSONLD_current_value: str

    _TargetLightIntensityJSONLD_producer_queue: Queue[Union[str, Exception]]
    _TargetLightIntensityJSONLD_current_value: str

    ControlLightIntensity_default_lifetime_of_execution: Optional[timedelta]

    def __init__(self, parent_server: Server):
        """

        This is a simple example of a generic Feature for controlling and retrieving the LightIntensity.
        A new target LightIntensity can be set anytime with the 'Control LightIntensity' Command.
        The LightIntensity range has been limited to prevent major damages of a device.
        In case the first target LightIntensity has not been reached, a ControlInterrupted Error should be thrown.

        """
        super().__init__(parent_server=parent_server)

        self._CurrentLightIntensity_producer_queue = Queue()

        self._TargetLightIntensity_producer_queue = Queue()

        self._CurrentLightIntensityJSONLD_producer_queue = Queue()

        self._TargetLightIntensityJSONLD_producer_queue = Queue()

        self.ControlLightIntensity_default_lifetime_of_execution = None

    @abstractmethod
    def get_Metadata(self, *, metadata: MetadataDict) -> str:
        """
        Additional information about the temperature metadata, e.g. units, range, etc. as JSON-LD context.

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Additional information about the temperature metadata, e.g. units, range, etc. as JSON-LD context.
        """

    def update_CurrentLightIntensity(self, CurrentLightIntensity: float, queue: Optional[Queue[float]] = None) -> None:
        """
        The current Light Intensity as measured by the controller.

        This method updates the observable property 'CurrentLightIntensity'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentLightIntensity_producer_queue
            self._CurrentLightIntensity_current_value = CurrentLightIntensity
        queue.put(CurrentLightIntensity)

    def CurrentLightIntensity_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        """
        The current Light Intensity as measured by the controller.

        This method is called when a client subscribes to the observable property 'CurrentLightIntensity'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_CurrentLightIntensity_subscriptions(self, error: Exception, queue: Optional[Queue[float]] = None) -> None:
        """
        The current Light Intensity as measured by the controller.

        This method aborts subscriptions to the observable property 'CurrentLightIntensity'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentLightIntensity_producer_queue
        queue.put(error)

    @property
    def current_CurrentLightIntensity(self) -> float:
        try:
            return self._CurrentLightIntensity_current_value
        except AttributeError:
            raise AttributeError("Observable property CurrentLightIntensity has never been set")

    def update_TargetLightIntensity(self, TargetLightIntensity: float, queue: Optional[Queue[float]] = None) -> None:
        """
        The Light Intensity as set by the ControlLightIntensity command.

        This method updates the observable property 'TargetLightIntensity'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetLightIntensity_producer_queue
            self._TargetLightIntensity_current_value = TargetLightIntensity
        queue.put(TargetLightIntensity)

    def TargetLightIntensity_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        """
        The Light Intensity as set by the ControlLightIntensity command.

        This method is called when a client subscribes to the observable property 'TargetLightIntensity'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_TargetLightIntensity_subscriptions(self, error: Exception, queue: Optional[Queue[float]] = None) -> None:
        """
        The Light Intensity as set by the ControlLightIntensity command.

        This method aborts subscriptions to the observable property 'TargetLightIntensity'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetLightIntensity_producer_queue
        queue.put(error)

    @property
    def current_TargetLightIntensity(self) -> float:
        try:
            return self._TargetLightIntensity_current_value
        except AttributeError:
            raise AttributeError("Observable property TargetLightIntensity has never been set")

    def update_CurrentLightIntensityJSONLD(
        self, CurrentLightIntensityJSONLD: str, queue: Optional[Queue[str]] = None
    ) -> None:
        """
        The current light intensity as measured by the controller in JSON-LD.

        This method updates the observable property 'CurrentLightIntensityJSONLD'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentLightIntensityJSONLD_producer_queue
            self._CurrentLightIntensityJSONLD_current_value = CurrentLightIntensityJSONLD
        queue.put(CurrentLightIntensityJSONLD)

    def CurrentLightIntensityJSONLD_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[str]]:
        """
        The current light intensity as measured by the controller in JSON-LD.

        This method is called when a client subscribes to the observable property 'CurrentLightIntensityJSONLD'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_CurrentLightIntensityJSONLD_subscriptions(
        self, error: Exception, queue: Optional[Queue[str]] = None
    ) -> None:
        """
        The current light intensity as measured by the controller in JSON-LD.

        This method aborts subscriptions to the observable property 'CurrentLightIntensityJSONLD'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentLightIntensityJSONLD_producer_queue
        queue.put(error)

    @property
    def current_CurrentLightIntensityJSONLD(self) -> str:
        try:
            return self._CurrentLightIntensityJSONLD_current_value
        except AttributeError:
            raise AttributeError("Observable property CurrentLightIntensityJSONLD has never been set")

    def update_TargetLightIntensityJSONLD(
        self, TargetLightIntensityJSONLD: str, queue: Optional[Queue[str]] = None
    ) -> None:
        """
        The light intensity as set by the ControlLightIntensity command in JSON-LD format.

        This method updates the observable property 'TargetLightIntensityJSONLD'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetLightIntensityJSONLD_producer_queue
            self._TargetLightIntensityJSONLD_current_value = TargetLightIntensityJSONLD
        queue.put(TargetLightIntensityJSONLD)

    def TargetLightIntensityJSONLD_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[str]]:
        """
        The light intensity as set by the ControlLightIntensity command in JSON-LD format.

        This method is called when a client subscribes to the observable property 'TargetLightIntensityJSONLD'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_TargetLightIntensityJSONLD_subscriptions(
        self, error: Exception, queue: Optional[Queue[str]] = None
    ) -> None:
        """
        The light intensity as set by the ControlLightIntensity command in JSON-LD format.

        This method aborts subscriptions to the observable property 'TargetLightIntensityJSONLD'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetLightIntensityJSONLD_producer_queue
        queue.put(error)

    @property
    def current_TargetLightIntensityJSONLD(self) -> str:
        try:
            return self._TargetLightIntensityJSONLD_current_value
        except AttributeError:
            raise AttributeError("Observable property TargetLightIntensityJSONLD has never been set")

    @abstractmethod
    def ControlLightIntensity(
        self, TargetLightIntensity: float, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> ControlLightIntensity_Responses:
        """

        Control the LightIntensity gradually to a set target.
        It is RECOMMENDED to use an oscillation free control system.



          :param TargetLightIntensity:
          The target Light Intensity that the server will try to reach.
          Note that the command might be completed at a LightIntensity that it evaluates to be close enough.
          If the LightIntensity cannot be reached, a 'LightIntensity Not Reachable' error will be thrown.


          :param metadata: The SiLA Client Metadata attached to the call
          :param instance: The command instance, enabling sending status updates to subscribed clients

        """
