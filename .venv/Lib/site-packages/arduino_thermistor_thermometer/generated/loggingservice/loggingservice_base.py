# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import timedelta
from typing import TYPE_CHECKING, List, Optional

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .loggingservice_types import (
    GetLogFile_Responses,
    ListenToAllLogEntries_IntermediateResponses,
    ListenToAllLogEntries_Responses,
    ListenToLoggingStream_IntermediateResponses,
    ListenToLoggingStream_Responses,
    SetLogLevel_Responses,
)

if TYPE_CHECKING:

    from ...server import Server


class LoggingServiceBase(FeatureImplementationBase, ABC):
    parent_server: Server

    ListenToLoggingStream_default_lifetime_of_execution: Optional[timedelta]

    ListenToAllLogEntries_default_lifetime_of_execution: Optional[timedelta]

    def __init__(self, parent_server: Server):
        """
            Provides services for integration of SiLA server logging.
        The service is intended to be used by the server to provide logging information to the client.
        The client can use the service to listen for log entries from the server.
        It is possible to listen for all log entries or only for log entries from a specific Stream.
        Error handling: If the server is not able to provide the requested information, it shall return an error message.

        """
        super().__init__(parent_server=parent_server)

        self.ListenToLoggingStream_default_lifetime_of_execution = None
        self.ListenToAllLogEntries_default_lifetime_of_execution = None

    @abstractmethod
    def get_LoggingStreamList(self, *, metadata: MetadataDict) -> List[str]:
        """
        Provides a list of URLs of all logging streams that are currently available on the server.

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Provides a list of URLs of all logging streams that are currently available on the server.
        """

    @abstractmethod
    def get_LogFileList(self, *, metadata: MetadataDict) -> List[str]:
        """
        Provides a list of URLs of all log files that are currently available on the server.

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Provides a list of URLs of all log files that are currently available on the server.
        """

    @abstractmethod
    def get_LogLevel(self, *, metadata: MetadataDict) -> str:
        """
        The current log level of the server.

        :param metadata: The SiLA Client Metadata attached to the call
        :return: The current log level of the server.
        """

    @abstractmethod
    def GetLogFile(self, LogFileName: str, *, metadata: MetadataDict) -> GetLogFile_Responses:
        """
        Gets the log file from the server.


        :param LogFileName: The name of the log file (recommended: in URL format) to get.

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - LogFile: Log File as text


        """

    @abstractmethod
    def SetLogLevel(self, LogLevel: str, *, metadata: MetadataDict) -> SetLogLevel_Responses:
        """
        Sets the log level of the server.


        :param LogLevel: The log level to set.

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def ListenToLoggingStream(
        self,
        LoggingStreamName: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ListenToLoggingStream_IntermediateResponses],
    ) -> ListenToLoggingStream_Responses:
        """
        Starts listening to a logging stream from the SiLA server


        :param LoggingStreamName: The logging stream name (recommended: in form of a URL) to listen to.

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        """

    @abstractmethod
    def ListenToAllLogEntries(
        self,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ListenToAllLogEntries_IntermediateResponses],
    ) -> ListenToAllLogEntries_Responses:
        """
        Starts listening to a stream of all consecutive log entries from the SiLA server


        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        """
