# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import Set

from sila2.client import SilaClient
from sila2.framework import FullyQualifiedFeatureIdentifier

from . import (
    connectioninfoprovider,
    deviceinfoprovider,
    lightintensitycontroller,
    loggingservice,
    simulationcontroller,
    storageinfoprovider,
    temperaturecontroller,
)


class Client(SilaClient):

    ConnectionInfoProvider: connectioninfoprovider.ConnectionInfoProviderClient

    DeviceInfoProvider: deviceinfoprovider.DeviceInfoProviderClient

    LightIntensityController: lightintensitycontroller.LightIntensityControllerClient

    LoggingService: loggingservice.LoggingServiceClient

    SimulationController: simulationcontroller.SimulationControllerClient

    StorageInfoProvider: storageinfoprovider.StorageInfoProviderClient

    TemperatureController: temperaturecontroller.TemperatureControllerClient

    _expected_features: Set[FullyQualifiedFeatureIdentifier] = {
        FullyQualifiedFeatureIdentifier("org.silastandard/core/SiLAService/v1"),
        FullyQualifiedFeatureIdentifier("de.unigreifswald.biochemie/device/ConnectionInfoProvider/v1"),
        FullyQualifiedFeatureIdentifier("de.unigreifswald.biochemie/device/DeviceInfoProvider/v1"),
        FullyQualifiedFeatureIdentifier("de.unigreifswald/instruments/LightIntensityController/v1"),
        FullyQualifiedFeatureIdentifier("de.unigreifswald/infrastructure/LoggingService/v0"),
        FullyQualifiedFeatureIdentifier("org.silastandard/core/SimulationController/v1"),
        FullyQualifiedFeatureIdentifier("de.unigreifswald.biochemie/device/StorageInfoProvider/v1"),
        FullyQualifiedFeatureIdentifier("de.unigreifswald/instruments/TemperatureController/v1"),
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self._register_defined_execution_error_class(
            connectioninfoprovider.ConnectionInfoProviderFeature.defined_execution_errors["OutputFormatNotSupported"],
            connectioninfoprovider.OutputFormatNotSupported,
        )

        self._register_defined_execution_error_class(
            deviceinfoprovider.DeviceInfoProviderFeature.defined_execution_errors["OutputFormatNotSupported"],
            deviceinfoprovider.OutputFormatNotSupported,
        )

        self._register_defined_execution_error_class(
            lightintensitycontroller.LightIntensityControllerFeature.defined_execution_errors[
                "LightIntensityNotReachable"
            ],
            lightintensitycontroller.LightIntensityNotReachable,
        )

        self._register_defined_execution_error_class(
            lightintensitycontroller.LightIntensityControllerFeature.defined_execution_errors["ControlInterrupted"],
            lightintensitycontroller.ControlInterrupted,
        )

        self._register_defined_execution_error_class(
            loggingservice.LoggingServiceFeature.defined_execution_errors["LogginStreamNotAvailable"],
            loggingservice.LogginStreamNotAvailable,
        )

        self._register_defined_execution_error_class(
            loggingservice.LoggingServiceFeature.defined_execution_errors["LogFileNotAvailable"],
            loggingservice.LogFileNotAvailable,
        )

        self._register_defined_execution_error_class(
            simulationcontroller.SimulationControllerFeature.defined_execution_errors["StartSimulationModeFailed"],
            simulationcontroller.StartSimulationModeFailed,
        )

        self._register_defined_execution_error_class(
            simulationcontroller.SimulationControllerFeature.defined_execution_errors["StartRealModeFailed"],
            simulationcontroller.StartRealModeFailed,
        )

        self._register_defined_execution_error_class(
            storageinfoprovider.StorageInfoProviderFeature.defined_execution_errors["OutputFormatNotSupported"],
            storageinfoprovider.OutputFormatNotSupported,
        )

        self._register_defined_execution_error_class(
            temperaturecontroller.TemperatureControllerFeature.defined_execution_errors["TemperatureNotReachable"],
            temperaturecontroller.TemperatureNotReachable,
        )

        self._register_defined_execution_error_class(
            temperaturecontroller.TemperatureControllerFeature.defined_execution_errors["ControlInterrupted"],
            temperaturecontroller.ControlInterrupted,
        )
