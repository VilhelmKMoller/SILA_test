# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import timedelta
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstance

from .temperaturecontroller_types import ControlTemperature_Responses

if TYPE_CHECKING:

    from ...server import Server


class TemperatureControllerBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _CurrentTemperature_producer_queue: Queue[Union[float, Exception]]
    _CurrentTemperature_current_value: float

    _TargetTemperature_producer_queue: Queue[Union[float, Exception]]
    _TargetTemperature_current_value: float

    _CurrentTemperatureJSONLD_producer_queue: Queue[Union[str, Exception]]
    _CurrentTemperatureJSONLD_current_value: str

    _TargetTemperatureJSONLD_producer_queue: Queue[Union[str, Exception]]
    _TargetTemperatureJSONLD_current_value: str

    ControlTemperature_default_lifetime_of_execution: Optional[timedelta]

    def __init__(self, parent_server: Server):
        """

        This is a simple example of a generic Feature for controlling and retrieving the temperature.
        A new target temperature can be set anytime with the 'Control Temperature' Command.
        The temperature range has been limited to prevent major damages of a device.
        In case the first target temperature has not been reached, a ControlInterrupted Error should be thrown.

        """
        super().__init__(parent_server=parent_server)

        self._CurrentTemperature_producer_queue = Queue()

        self._TargetTemperature_producer_queue = Queue()

        self._CurrentTemperatureJSONLD_producer_queue = Queue()

        self._TargetTemperatureJSONLD_producer_queue = Queue()

        self.ControlTemperature_default_lifetime_of_execution = None

    @abstractmethod
    def get_Metadata(self, *, metadata: MetadataDict) -> str:
        """
        Additional information about the temperature metadata, e.g. units, range, etc. as JSON-LD context .

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Additional information about the temperature metadata, e.g. units, range, etc. as JSON-LD context .
        """

    def update_CurrentTemperature(self, CurrentTemperature: float, queue: Optional[Queue[float]] = None) -> None:
        """
        The current temperature as measured by the controller.

        This method updates the observable property 'CurrentTemperature'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentTemperature_producer_queue
            self._CurrentTemperature_current_value = CurrentTemperature
        queue.put(CurrentTemperature)

    def CurrentTemperature_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        """
        The current temperature as measured by the controller.

        This method is called when a client subscribes to the observable property 'CurrentTemperature'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_CurrentTemperature_subscriptions(self, error: Exception, queue: Optional[Queue[float]] = None) -> None:
        """
        The current temperature as measured by the controller.

        This method aborts subscriptions to the observable property 'CurrentTemperature'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentTemperature_producer_queue
        queue.put(error)

    @property
    def current_CurrentTemperature(self) -> float:
        try:
            return self._CurrentTemperature_current_value
        except AttributeError:
            raise AttributeError("Observable property CurrentTemperature has never been set")

    def update_TargetTemperature(self, TargetTemperature: float, queue: Optional[Queue[float]] = None) -> None:
        """
        The actual target temperature as set by the ControlTemperature command.

        This method updates the observable property 'TargetTemperature'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetTemperature_producer_queue
            self._TargetTemperature_current_value = TargetTemperature
        queue.put(TargetTemperature)

    def TargetTemperature_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[float]]:
        """
        The actual target temperature as set by the ControlTemperature command.

        This method is called when a client subscribes to the observable property 'TargetTemperature'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_TargetTemperature_subscriptions(self, error: Exception, queue: Optional[Queue[float]] = None) -> None:
        """
        The actual target temperature as set by the ControlTemperature command.

        This method aborts subscriptions to the observable property 'TargetTemperature'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetTemperature_producer_queue
        queue.put(error)

    @property
    def current_TargetTemperature(self) -> float:
        try:
            return self._TargetTemperature_current_value
        except AttributeError:
            raise AttributeError("Observable property TargetTemperature has never been set")

    def update_CurrentTemperatureJSONLD(
        self, CurrentTemperatureJSONLD: str, queue: Optional[Queue[str]] = None
    ) -> None:
        """
        The current temperature as measured by the controller in JSON-LD format.

        This method updates the observable property 'CurrentTemperatureJSONLD'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentTemperatureJSONLD_producer_queue
            self._CurrentTemperatureJSONLD_current_value = CurrentTemperatureJSONLD
        queue.put(CurrentTemperatureJSONLD)

    def CurrentTemperatureJSONLD_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[str]]:
        """
        The current temperature as measured by the controller in JSON-LD format.

        This method is called when a client subscribes to the observable property 'CurrentTemperatureJSONLD'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_CurrentTemperatureJSONLD_subscriptions(
        self, error: Exception, queue: Optional[Queue[str]] = None
    ) -> None:
        """
        The current temperature as measured by the controller in JSON-LD format.

        This method aborts subscriptions to the observable property 'CurrentTemperatureJSONLD'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentTemperatureJSONLD_producer_queue
        queue.put(error)

    @property
    def current_CurrentTemperatureJSONLD(self) -> str:
        try:
            return self._CurrentTemperatureJSONLD_current_value
        except AttributeError:
            raise AttributeError("Observable property CurrentTemperatureJSONLD has never been set")

    def update_TargetTemperatureJSONLD(self, TargetTemperatureJSONLD: str, queue: Optional[Queue[str]] = None) -> None:
        """
        The target temperature as set by the ControlTemperature command in JSON-LD format.

        This method updates the observable property 'TargetTemperatureJSONLD'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetTemperatureJSONLD_producer_queue
            self._TargetTemperatureJSONLD_current_value = TargetTemperatureJSONLD
        queue.put(TargetTemperatureJSONLD)

    def TargetTemperatureJSONLD_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[str]]:
        """
        The target temperature as set by the ControlTemperature command in JSON-LD format.

        This method is called when a client subscribes to the observable property 'TargetTemperatureJSONLD'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_TargetTemperatureJSONLD_subscriptions(self, error: Exception, queue: Optional[Queue[str]] = None) -> None:
        """
        The target temperature as set by the ControlTemperature command in JSON-LD format.

        This method aborts subscriptions to the observable property 'TargetTemperatureJSONLD'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._TargetTemperatureJSONLD_producer_queue
        queue.put(error)

    @property
    def current_TargetTemperatureJSONLD(self) -> str:
        try:
            return self._TargetTemperatureJSONLD_current_value
        except AttributeError:
            raise AttributeError("Observable property TargetTemperatureJSONLD has never been set")

    @abstractmethod
    def ControlTemperature(
        self, TargetTemperature: float, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> ControlTemperature_Responses:
        """

        Control the temperature gradually to a set target.
        It is RECOMMENDED to use an oscillation free control system.



          :param TargetTemperature:
          The target temperature that the server will try to reach.
          Note that the command might be completed at a temperature that it evaluates to be close enough.
          If the temperature cannot be reached, a 'Temperature Not Reachable' error will be thrown.


          :param metadata: The SiLA Client Metadata attached to the call
          :param instance: The command instance, enabling sending status updates to subscribed clients

        """
