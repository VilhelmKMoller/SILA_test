from time import sleep
from time import time as get_time

import serial
from serial import Serial, SerialTimeoutException


class ControllerError(Exception):
    """Exception raised on controller reporting an error"""

    pass


class UnexpectedReplyException(Exception):
    """Exception raised on module receiving an unexpected reply from the controller"""

    def __init__(self, reply, message="Unexpected reply received"):
        super().__init__(message + f" '{reply}'")


class UnknownCommandException(Exception):
    """Exception raised on controller not recognizing a command"""

    def __init__(self, command, message="Unknown command exception"):
        super().__init__(message + f" '{command}'")


class BioShakeCom:
    """
    Communication interface for communicating with a QInstruments BioShaker controller

    ...

    Attributes
    ----------
    baudRate : int
        baudrate used with serial port communication
    dataBits : int
        number of bits in each sent character
    stopBits : int
        number of stop bits
    parity : str
        serial communication parity
    timeout : float
        communication time (s), used when waiting for replies

    Methods
    -------
    BuildErrorMessage(errc : int) -> str
        Returns a matching formatted error message from a given error code
    DecodeErrorMessage(errc : int) -> str
        Returns the raw message matching the error code
    DisableCLED()
        Sends a command to the controller to turn off the indication LED
    EnableCLED()
        Sends a command to the controller to turn on the indication LED
    GetDescription() -> str
        Request the model description text from the controller
    GetErrorList() -> list
        Request a list of active error codes from the controller
    GetFirmwareVersion() -> str
        Request the controller firmware version
    GetSerialNumber() -> str
        Request the controller serial number
    GetControllerActive() -> bool
        Request the controller active heating/cooling state (True = active)
    GetTemperature() -> float
        Request the current temperature of the controller
    GetTargetTemperature() -> float
        Request the current target temperature of the controller
    ResetDevice()
        Send a reset signal to the device, required to resume operation after an error
    SetControllerOff()
        Send a command to turn off the controller heating/cooling
    SetControllerOn()
        Send a command to turn on the controller heating/cooling
    SetTargetTemperature(temp : float)
        Send a command to change the controller target temperature
    """

    # Communication parameters
    baudRate: int = 9600
    dataBits: int = 8
    stopBits: int = 1
    parity: str = serial.PARITY_NONE
    timeout: float = 1.0

    # Constants
    SHAKER_HOMEPOSITION = 3  # Shaker has stopped and is in home position

    # Available serial commands (cold plate)
    cmd_getDescription: str = "getDescription\r"
    cmd_getVersion: str = "getVersion\r"
    cmd_getSerial: str = "getSerial\r"
    cmd_resetDevice: str = "reset\r"
    cmd_getErrorList: str = "getErrorList\r"
    cmd_enableCLED: str = "enableCLED\r"
    cmd_disableCLED: str = "disableCLED\r"
    cmd_tempOn: str = "tempOn\r"
    cmd_tempOff: str = "tempOff\r"
    cmd_getTempState: str = "getTempState\r"
    cmd_getTempTarget: str = "getTempTarget\r"
    cmd_setTempTarget: str = "setTempTarget<%>\r"  # Partial command!!
    cmd_getTempActual: str = "gta\r"

    # Available serial commands (lock)
    cmd_setLock: str = "setElmLockPos\r"
    cmd_setUnlock: str = "setElmUnlockPos\r"

    # Available serial commands (shaker)
    cmd_setShakeOn: str = "shakeOn\r"
    cmd_setShakeOnWithRuntime: str = "shakeOnWithRuntime<%>\r"
    cmd_setShakeOff: str = "shakeOff\r"
    cmd_setShakeGoHome: str = "shakeGoHome\r"
    cmd_setShakeTargetSpeed: str = "setShakeTargetSpeed<%>\r"
    cmd_setShakeAcceleration: str = "setShakeAcceleration<%>\r"
    cmd_getShakeState: str = "getShakeState\r"

    def __init__(self, port):
        """
        Parameters
        ----------
        port : obj
            The name of the serial port to use

        Raises
        ------
        ValueError
            Bad parameter error
        """

        if port is None:
            raise ValueError("Invalid input 'None'")

        # Port name is provided
        if type(port) is str:
            self.ser = Serial()
            self.ser.port = port
        # Port object is provided
        else:
            self.ser = port

    @staticmethod
    def BuildErrorMessage(errc: int) -> str:
        """
        Returns a matching formatted error message from a given error code

        Parameters
        ----------
        errc : int
            error code to evaluate

        Returns
        -------
        error message : str
            matching formatted error message
        """
        return f"[{errc}] " + BioShakeCom.DecodeErrorMessage(errc)

    @staticmethod
    def DecodeErrorMessage(errc: int) -> str:
        """
        Returns a matching raw error message from a given error code

        Parameters
        ----------
        errc : int
            error code to evaluate

        Returns
        -------
        error message : str
            matching error message
        """
        if errc == 300:
            return "General error. Please CALL the service line."
        if errc == 301:
            return "IC-Driver error. Please CALL the service line."
        if errc == 303:
            return "Verification error by the unlock position. Please RESTART the system."
        if errc == 304:
            return "Error caused by unseccessful reach the lock position (timeout). Please RESTART the system"
        if errc == 305:
            return "Error caused by unseccessful reach the unlock position (timeout). Please RESTART the system"
        if errc == 306:
            return "Error caused by unseccessful reach the lock position (over current). Please RESTART the system"
        if errc == 307:
            return "Error caused by unseccessful reach the lock position (over current). Please RESTART the system"
        if errc == 10002 or errc == 10003:
            return "Instruction sent with an invalid parameter."
        if errc < 10100 and errc >= 10000:
            return "Internal firmware sequence failure."
        if errc // 20000 == 1:
            return "Internal MCU periphery error."
        if errc <= 31099 and errc >= 31000:
            return "EEPROM data verification failed."
        if errc <= 32099 and errc >= 32000:
            return "Communication with internal temperature sensors failed."
        if errc == 33010:
            return "Device internal temperature too hot."
        if errc == 33020:
            return "Emergency shutdown of the temperature fuse has triggered."
        if errc == 33030:
            return "Emergency temperature sensor validation has failed."
        if errc == 34010 or errc == 34110:
            return "FAN-1 or FAN-2 power supply invalid."
        if errc == 34020 or errc == 34120:
            return "FAN-1 or FAN-2 has stalled."
        if errc == 34030 or errc == 34130:
            return "FAN-1 or FAN-2 airway clogged."
        if errc == 35010:
            return "TEC power supply invalid."
        if errc == 35020:
            return "TEC power supply short circuit detected."
        if errc == 35030:
            return "TEC power supply open circuit detected."
        if errc <= 36099 and errc >= 36000:
            return "Internal temperature controller failure."
        if errc == 37030:
            return "Shaker has stalled."
        if errc == 37040:
            return "Shaker cannot move because the solenoid does not unlock."
        if errc == 37060:
            return "Unable to lock Shaker in the home position."
        if errc == 37070:
            return "'Shaker find home position' timeout occurred."
        if errc <= 37099 and errc >= 37000:
            return "Internal shake controller failure."
        if errc == 38030:
            return "ELM motion timeout occurred."
        if errc == 38090:
            return "ELM self-test has failed."
        if errc <= 38099 and errc >= 38000:
            return "Internal ELM controller failure."
        if errc == 39030:
            return "Solenoid motion timeout occurred."
        if errc <= 39099 and errc >= 39000:
            return "Internal solenoid controller failure."

        return "Unrecognized error code"

    def DisableCLED(self):
        """
        Order coldplate LED off

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """
        self.__SendCommand(BioShakeCom.cmd_disableCLED)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def EnableCLED(self):
        """
        Order coldplate LED on

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """
        self.__SendCommand(BioShakeCom.cmd_enableCLED)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def __enter__(self):
        """
        Entry point used with 'with' statement

        Example:
            with BioShakeCom("COM3") as ser:
                console.log("GetDescription: " + ser.GetDescription())
        """
        self.Start()
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        """Exit point used with 'with' statement"""
        self.Stop()

    def __EmptyBuffer(self):
        self.ser.read_all()

    def GetDescription(self) -> str:
        """
        Request controller description string from the controller

        Returns
        -------
        description : str
            controller description string (e.g. 'Q.MTP-ColdPlate')

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """
        self.__SendCommand(BioShakeCom.cmd_getDescription)
        return self.__HandleError(self.__WaitForReply().strip())

    def GetErrorList(self) -> list:
        self.__SendCommand(BioShakeCom.cmd_getErrorList)
        reply = self.__WaitForReply().strip()
        if reply == "e":
            raise ControllerError("Error fetching error information")
        splitString = [x.strip(" \n\r{}") for x in reply.split(";")]
        splitString = filter(lambda x: len(x) > 0, splitString)
        return [int(x) for x in splitString]

    def GetFirmwareVersion(self) -> str:
        self.__SendCommand(BioShakeCom.cmd_getVersion)
        return self.__HandleError(self.__WaitForReply().strip())

    def GetSerialNumber(self) -> str:
        self.__SendCommand(BioShakeCom.cmd_getSerial)
        return self.__HandleError(self.__WaitForReply().strip().strip("<>"))

    def GetShakeState(self) -> int:
        self.__SendCommand(BioShakeCom.cmd_getShakeState)
        return int(self.__HandleError(self.__WaitForReply().strip()))

    def GetTemperatureControlActive(self) -> bool:
        self.__SendCommand(BioShakeCom.cmd_getTempState)
        return self.__HandleError(self.__WaitForReply().strip()) == "1"

    def GetTemperature(self) -> float:
        self.__SendCommand(BioShakeCom.cmd_getTempActual)
        return float(self.__HandleError(self.__WaitForReply().strip()))

    def GetTargetTemperature(self) -> float:
        self.__SendCommand(BioShakeCom.cmd_getTempTarget)
        return float(self.__HandleError(self.__WaitForReply().strip()))

    def __HandleError(self, msg, exp_reply=None):
        if msg == "e":  # Error
            self.__RaiseError(self.GetErrorList())
        if msg[0] == "u":  # Unknown command
            raise UnknownCommandException(command=msg[1:])
        if exp_reply is not None and exp_reply != msg:
            raise UnexpectedReplyException(reply=msg)
        return msg

    @staticmethod
    def __RaiseError(errc: list):
        if len(errc) == 0:
            raise ControllerError("Unknown error")
        if len(errc) == 1:
            raise ControllerError(BioShakeCom.BuildErrorMessage(errc[0]))
        raise ControllerError(BioShakeCom.BuildErrorMessage(errc[0]) + f" (+{len(errc)-1} additional error(s))")

    def ResetDevice(self, wait_time=5.0):
        self.__SendCommand(BioShakeCom.cmd_resetDevice)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")
        sleep(wait_time)  # Wait for coldplate to restart
        boot_info = self.ser.readlines()
        nfo = ""
        for line in boot_info:
            nfo += line.decode("utf-8").strip() + "\n"
        return nfo

    def __SendCommand(self, cmd: str) -> None:
        """
        Formats the provided [cmd] string into utf-8 and sends over the serial port

        Parameters
        ----------
        cmd : str
            string to send over serial port

        Raises
        ------
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        """
        self.ser.flushInput()  # Flush input stream, to remove any left-over old messages
        self.ser.write(cmd.encode("utf-8"))

    def SetTemperatureControlOff(self):
        self.__SendCommand(BioShakeCom.cmd_tempOff)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def SetTemperatureControlOn(self):
        self.__SendCommand(BioShakeCom.cmd_tempOn)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def SetShakeHome(self):
        """
        Request shaker to go to home position and lock in place

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """
        self.__SendCommand(BioShakeCom.cmd_setShakeGoHome)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")
        sleep(3)  # Sleep - to make sure command has time to finish

        start_time = get_time()
        while start_time + 100 > get_time():
            state = self.GetShakeState()
            if state == BioShakeCom.SHAKER_HOMEPOSITION:  # Stopped and in home position
                break
            sleep(0.5)

    def SetShakeOff(self):
        """
        Request shaker to stop shaking, go to home position and lock in place

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """
        self.__SendCommand(BioShakeCom.cmd_setShakeOff)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

        start_time = get_time()
        while start_time + 100 > get_time():
            state = self.GetShakeState()
            if state == BioShakeCom.SHAKER_HOMEPOSITION:  # Stopped and in home position
                break
            sleep(0.5)

    def SetShakeOn(self, speed: int, acc: int = 0):
        """
        Request shaker to start shaking for an undefined length of time

        Parameters
        ----------
        acc : int
            acceleration/deacceleration time in seconds
        speed : int
            speed in rpm at which to run the shaker

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """

        if speed < 200 or speed > 9999:
            raise ValueError("speed is out of range [200, 9999]")
        self.__SendCommand(BioShakeCom.cmd_setShakeTargetSpeed.replace("<%>", str(int(speed))))
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

        if acc < 0 or acc > 99:
            raise ValueError("acc is out of range [0, 99]")
        self.__SendCommand(BioShakeCom.cmd_setShakeAcceleration.replace("<%>", str(int(acc))))
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

        self.__SendCommand(BioShakeCom.cmd_setShakeOn)
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def SetShakeOnForTime(self, time: int, speed: int, acc: int = 0):
        """
        Request shaker to start shaking and shake for time_s seconds

        Parameters
        ----------
        time : int
            time in seconds after which the shaker stops automatically
        acc : int
            acceleration/deacceleration time in seconds
        speed : int
            speed in rpm at which to run the shaker

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        ValueError
            Parameter input error
        """
        if speed < 200 or speed > 9999:
            raise ValueError("speed is out of range [200, 9999]")
        self.__SendCommand(BioShakeCom.cmd_setShakeTargetSpeed.replace("<%>", str(int(speed))))
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

        if acc < 0 or acc > 99:
            raise ValueError("acc is out of range [0, 99]")
        self.__SendCommand(BioShakeCom.cmd_setShakeAcceleration.replace("<%>", str(int(acc))))
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

        if time <= 0 or time > 999999:
            raise ValueError("time is out of range [1, 999999]")
        self.__SendCommand(BioShakeCom.cmd_setShakeOnWithRuntime.replace("<%>", str(int(time))))
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def SetLock(self):
        """
        Order ELM lock locked

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """
        self.__SendCommand(BioShakeCom.cmd_setLock)
        sleep(2.5)  # Reply is only received after lock has engaged - up to a 3000ms wait
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def SetTargetTemperature(self, temp: float):
        if temp < -20 or temp > 99.9:
            raise ValueError("temp is out of range [-20, 99.9]")
        self.__SendCommand(BioShakeCom.cmd_setTempTarget.replace("<%>", str(int(temp * 10))))
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def SetUnlock(self):
        """
        Order ELM lock unlocked

        Raises
        ------
        ControllerError
            Controller is in an error state
        SerialTimeoutException
            In case a write timeout is configured for the port and the time is exceeded.
        UnexpectedReplyException
            The wrong reply was received as a receipt of the command being sent
        UnknownCommandException
            Controller did not recognize the command
        """
        self.__SendCommand(BioShakeCom.cmd_setUnlock)
        sleep(2.5)  # Reply is only received after lock has disengaged - up to a 3000ms wait
        self.__HandleError(self.__WaitForReply().strip(), exp_reply="ok")

    def Start(self):
        self.ser.baudrate = BioShakeCom.baudRate
        self.ser.bytesize = BioShakeCom.dataBits
        self.ser.parity = BioShakeCom.parity
        self.ser.stopbits = BioShakeCom.stopBits
        self.ser.timeout = BioShakeCom.timeout
        self.ser.xonxoff = 0
        self.ser.open()

    def Stop(self):
        self.ser.close()

    def __WaitForReply(self):
        """
        Waits for a <LF> character to be received on the serial port, then returns it and all preceding characters

        Returns
        -------
        read string : str
            returns available data on the serial port

        Raises
        ------
        SerialTimeoutException
            In case a timeout is configured for the port and the time is exceeded.
        """

        # Read until <LF> character is received and decode
        buffer = self.ser.readline().decode("utf-8")

        # Handle empty string case
        if not buffer:
            raise SerialTimeoutException("Timeout while waiting for reply")

        return buffer
