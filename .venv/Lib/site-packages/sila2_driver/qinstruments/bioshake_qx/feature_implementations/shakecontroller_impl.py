# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

import logging
from time import sleep, time
from typing import TYPE_CHECKING

from sila2.framework import CommandExecutionStatus
from sila2.framework.errors.undefined_execution_error import UndefinedExecutionError
from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..api.bioshake import BioShakeCom
from ..generated.shakecontroller import (
    GoHome_Responses,
    LockPlate_Responses,
    ShakeControllerBase,
    ShakeForTime_IntermediateResponses,
    ShakeForTime_Responses,
    StartShaking_Responses,
    StopShaking_Responses,
    UnlockPlate_Responses,
)

if TYPE_CHECKING:
    from ..server import Server


logger = logging.getLogger(__name__)


class ShakeControllerImpl(ShakeControllerBase):
    def __init__(self, parent_server: Server) -> None:
        self.settings = None
        super().__init__(parent_server=parent_server)

    def StopShaking(self, *, metadata: MetadataDict) -> StopShaking_Responses:
        try:
            with BioShakeCom(self.settings.PortName) as com:
                com.SetShakeOff()
            return StopShaking_Responses()
        except Exception as ex:
            logger.exception(ex)
            raise UndefinedExecutionError(repr(ex))

    def StartShaking(
        self, TargetSpeed: int, TargetAcceleration: int, *, metadata: MetadataDict
    ) -> StartShaking_Responses:
        try:
            with BioShakeCom(self.settings.PortName) as com:
                com.SetShakeOn(speed=TargetSpeed, acc=TargetAcceleration)
            return StartShaking_Responses()
        except Exception as ex:
            logger.exception(ex)
            raise UndefinedExecutionError(repr(ex))

    def GoHome(self, *, metadata: MetadataDict) -> GoHome_Responses:
        try:
            with BioShakeCom(self.settings.PortName) as com:
                com.SetShakeHome()
            return GoHome_Responses()
        except Exception as ex:
            logger.exception(ex)
            raise UndefinedExecutionError(repr(ex))

    def UnlockPlate(self, *, metadata: MetadataDict) -> UnlockPlate_Responses:
        try:
            with BioShakeCom(self.settings.PortName) as com:
                com.SetUnlock()
            return UnlockPlate_Responses()
        except Exception as ex:
            logger.exception(ex)
            raise UndefinedExecutionError(repr(ex))

    def LockPlate(self, *, metadata: MetadataDict) -> LockPlate_Responses:
        try:
            with BioShakeCom(self.settings.PortName) as com:
                com.SetLock()
            return LockPlate_Responses()
        except Exception as ex:
            logger.exception(ex)
            raise UndefinedExecutionError(repr(ex))

    def ShakeForTime(
        self,
        Runtime: int,
        TargetSpeed: int,
        TargetAcceleration: int,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ShakeForTime_IntermediateResponses],
    ) -> ShakeForTime_Responses:
        try:
            with BioShakeCom(self.settings.PortName) as com:
                instance.status = CommandExecutionStatus.running
                com.SetShakeOn(speed=TargetSpeed, acc=TargetAcceleration)

                start = time()
                passed_time = 0.0
                while passed_time < Runtime:
                    sleep(0.5)
                    passed_time = time() - start
                    time_left = Runtime - passed_time

                    instance.send_intermediate_response(
                        ShakeForTime_IntermediateResponses(
                            max(0.0, time_left),  # Do not return negative values
                        )
                    )

                com.SetShakeOff()

            return ShakeForTime_Responses()
        except Exception as ex:
            logger.exception(ex)
            raise UndefinedExecutionError(repr(ex))
